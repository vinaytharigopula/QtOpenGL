/*******************************************************************************
 * compute/gaussianBlur.comp
 *------------------------------------------------------------------------------
 * Apply the lighting calculation to a given fragment of incident light.
 * Uses GBuffer information to access statistics about the scene itself.
 ******************************************************************************/
// Thread group size 128x1x1 (1 is implied for y/z)
#include <Bindings.glsl>

layout (local_size_x = 128) in;

// Blur Information
layout(binding = K_BLUR_BINDING)
uniform BlurData
{
  int Width;          // w
  int Width2;         // 2w
  float Weights[65];  // Weight[2w + 1] = { ... }
} Blur;
uniform ivec2 Direction;

// Inputs / Outputs
layout (r32f) uniform readonly  image2D src;
layout (r32f) uniform writeonly image2D dst;

// Shared Workspace (Max w = 32)
shared float v[128 + 64];

void main()
{
  // Note:
  //   WorkGroupSize = (local_size_x,local_size_y,local_size_z)
  //     ^- layout declared at top of compute shader.
  //   WorkGroupId =  [(0,0,0), (num_groups_x,num_groups_y,num_groups_z)]
  //     ^- Parameters passed in from glDispatchCompute().
  //   LocalInvocation = [(0,0,0), (local_size_x-1,local_size_y-1,local_size_z-1]
  //     ^- Essentially the current executing core.
  //
  //   GlobalInvocation = GroupId * GroupSize + LocalInvocation
  ivec2 currTexel = ivec2(gl_GlobalInvocationID.x * Direction + gl_GlobalInvocationID.y * (1 - Direction));
  uint texelIndex = gl_LocalInvocationID.x;
  int workWidth = int(gl_WorkGroupSize.x);

  // Load image information into temporary workspace
  ivec2 sourceTexel = currTexel - Blur.Width * Direction;
  v[texelIndex] = imageLoad(src, sourceTexel).r;

  // First 2w threads will load the last 2w texels.
  if (texelIndex < Blur.Width2)
  {
    ivec2 uv = clamp(sourceTexel + workWidth * Direction, ivec2(1,1), ivec2(1024, 768));
    v[texelIndex + workWidth] = imageLoad(src, uv).r;
  }

  // We must wait until all information
  // is loaded into the shared work group.
  barrier();

  // Calculate blurred results for each pixel
  float result = 0.0;
  for (int j = 0; j <= Blur.Width2; ++j)
  {
    result += v[texelIndex + j] * Blur.Weights[j];
  }
  imageStore(dst, currTexel, vec4(result));
}
